import typing as t
from uuid import UUID
from typing_extensions import Protocol
from datetime import datetime
from mlboard.models.protocols import IPoint, ITrace, IWorkspace

from typing_extensions import Protocol

IRecord = t.Dict[str, t.Any]


ITransaction = t.AsyncContextManager[None]


class IConnection(Protocol):
    async def fetch(self, dsl: str, *args: t.Any) -> t.Sequence[IRecord]: ...
    async def fetchval(self, dsl: str, *args: t.Any) -> t.Optional[t.Any]: ...
    async def fetchrow(self, dsl: str, *args: t.Any) -> t.Optional[IRecord]: ...
    async def execute(self, dsl: str, *args: t.Any) -> None: ...
    async def copy_records_to_table(
        self, table_name: str, columns: t.Iterable[str], records: t.Iterable[t.Tuple]) -> None: ...

    async def close(self) -> None: ...
    async def set_type_codec(self, *args: t.Any, **kwargs: t.Any) -> None: ...
    def transaction(self) -> ITransaction: ...


U = t.TypeVar('U')
T = t.TypeVar('T')


class IModelQuery(Protocol[T, U]):
    def to_model(self, row: t.Any) -> T: ...
    def to_models(self, rows: t.Sequence) -> t.Sequence[T]: ...
    async def bulk_insert(self, rows: t.Sequence[T]) -> int: ...
    async def insert(self, obj: T) -> t.Optional[U]: ...
    async def update(self, key: str, value: U, payload: t.Dict[str, t.Any]) -> t.Optional[U]: ...
    async def delete(self) -> None: ...
    async def delete_by(self, **kwargs: t.Any) -> None: ...
    async def all(self) -> t.Sequence[T]: ...
    async def get_by(self, **kwargs: t.Any) -> t.Optional[T]: ...
    async def filter_by(self, **kwargs: t.Any) -> t.Sequence[T]: ...
    async def count_by(self, **kwargs: t.Any) -> int: ...


class IPointQuery(Protocol):
    async def delete(self) -> None: ...
    async def delete_by(self, **kwargs: t.Any) -> None: ...
    async def range_by(self, trace_id: UUID, from_date: datetime, to_date: datetime) -> t.Sequence[IPoint]: ...
    async def bulk_insert(self, rows: t.Sequence[IPoint]) -> int: ...
    async def range_by_limit(self, trace_id: UUID, limit: int) -> t.Sequence[IPoint]: ...


class ITraceQuery(Protocol):
    async def all(self) -> t.Sequence[ITrace]: ...
    async def delete(self) -> None: ...
    async def delete_by(self, **kwargs: t.Any) -> None: ...
    async def insert(self, row: ITrace) -> None: ...
    async def get_by(self, **kwargs: t.Any) -> t.Optional[ITrace]: ...
    async def filter_by(self, **kwargs: t.Any) -> t.Sequence[ITrace]: ...
    async def update(self, key: str, value: UUID, payload: t.Dict[str, t.Any]) -> t.Optional[UUID]: ...


class IWorkspaceQuery(Protocol):
    async def all(self) -> t.Sequence[IWorkspace]: ...
    async def delete(self) -> None: ...
    async def delete_by(self, **kwargs: t.Any) -> None: ...
    async def insert(self, row: IWorkspace) -> None: ...
    async def get_by(self, **kwargs: t.Any) -> t.Optional[IWorkspace]: ...
    async def update(self, key: str, value: UUID, payload: t.Dict[str, t.Any]) -> t.Optional[UUID]: ...
