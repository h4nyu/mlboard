# (generated with --quick)

import typing
from typing import Any, AsyncContextManager, Coroutine, Dict, List, Optional, Sequence, Type

IRecord = Dict[str, Any]

Protocol: Type[typing.Protocol]
asyncpg: module
datetime: Type[datetime.datetime]
t: module
typing: module
ujson: module
uuid: module

class ConnectionPool:
    _conn: Any
    _pool: Any
    def __aenter__(self) -> Coroutine[Any, Any, IConnection]: ...
    def __aexit__(self, exc_type, exc, tb) -> Coroutine[Any, Any, None]: ...
    def __init__(self, pool) -> None: ...
    def add_codec(self) -> Coroutine[Any, Any, None]: ...

class Database:
    _max_size: int
    _min_size: int
    is_connected: bool
    pool: Any
    url: str
    def __aenter__(self) -> Coroutine[Any, Any, None]: ...
    def __aexit__(self, exc_type, exc, tb) -> Coroutine[Any, Any, None]: ...
    def __init__(self, url: str, min_size: int = ..., max_size: int = ...) -> None: ...
    def connect(self, loop = ...) -> Coroutine[Any, Any, None]: ...
    def disconnect(self) -> Coroutine[Any, Any, None]: ...
    def get_conn(self) -> ConnectionPool: ...

class IConnection(typing.Protocol):
    def copy_records_to_table(self, table_name: str, columns: Sequence[str], records: Sequence[tuple]) -> Coroutine[Any, Any, None]: ...
    def execute(self, sql: str, *args) -> Coroutine[Any, Any, None]: ...
    def fetch(self, sql: str, *args) -> Coroutine[Any, Any, List[Dict[str, Any]]]: ...
    def fetchrow(self, sql: str, *args) -> Coroutine[Any, Any, Optional[Dict[str, Any]]]: ...
    def fetchval(self, sql: str, *args) -> coroutine: ...
    def transaction(self) -> AsyncContextManager: ...

class IPool(typing.Protocol):
    def close(self) -> Coroutine[Any, Any, None]: ...
