# (generated with --quick)

import dataclasses
import mlboard.core.database
import mlboard.core.models.chamber
from typing import Any, Coroutine, Dict, List, Optional, Tuple, Type

IRecord = Dict[str, Any]

IConnection: Type[mlboard.core.database.IConnection]
TABLE_NAME: str
crud: module
datetime: Type[datetime.datetime]
es: module
ms: module
t: module
uuid: module

class Chamber:
    conn: mlboard.core.database.IConnection
    def __init__(self, conn: mlboard.core.database.IConnection) -> None: ...
    def all(self) -> Coroutine[Any, Any, List[mlboard.core.models.chamber.IChamber]]: ...
    def delete(self) -> Coroutine[Any, Any, None]: ...
    def filter_by(self, **kwargs) -> Coroutine[Any, Any, List[mlboard.core.models.chamber.IChamber]]: ...
    def get_by(self, **kwargs) -> Coroutine[Any, Any, Optional[mlboard.core.models.chamber.IChamber]]: ...
    def insert(self, obj: mlboard.core.models.chamber.Chamber) -> coroutine: ...
    def to_model(self, row: Dict[str, Any]) -> mlboard.core.models.chamber.IChamber: ...
    def to_models(self, rows: List[Dict[str, Any]]) -> List[mlboard.core.models.chamber.IChamber]: ...
    def update(self, **kwargs) -> coroutine: ...
    def upsert(self, obj: mlboard.core.models.chamber.Chamber) -> coroutine: ...

def fields(class_or_instance) -> Tuple[dataclasses.Field, ...]: ...
