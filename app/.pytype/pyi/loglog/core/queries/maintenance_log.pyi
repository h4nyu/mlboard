# (generated with --quick)

import mlboard.core.database
import mlboard.core.models.maintenance_log
from typing import Any, Coroutine, Dict, List, Sequence, Type

IRecord = Dict[str, Any]

IConnection: Type[mlboard.core.database.IConnection]
TABLE_NAME: str
crud: module
ms: module
t: module
typing: module
uuid: module

class MaintenanceLog:
    conn: mlboard.core.database.IConnection
    def __init__(self, conn: mlboard.core.database.IConnection) -> None: ...
    def all(self) -> Coroutine[Any, Any, Sequence[mlboard.core.models.maintenance_log.IMaintenanceLog]]: ...
    def bulk_insert(self, rows: Sequence[mlboard.core.models.maintenance_log.IMaintenanceLog]) -> Coroutine[Any, Any, int]: ...
    def delete(self) -> Coroutine[Any, Any, None]: ...
    def delete_by(self, **kwargs) -> Coroutine[Any, Any, None]: ...
    def filter_in(self, maintenace_ids: List[uuid.UUID] = ...) -> Coroutine[Any, Any, List[Dict[str, Any]]]: ...
    def get_lasts(self) -> Coroutine[Any, Any, Sequence[mlboard.core.models.maintenance_log.IMaintenanceLog]]: ...
    def insert(self, obj: mlboard.core.models.maintenance_log.MaintenanceLog) -> Coroutine[Any, Any, None]: ...
    def to_model(self, row: Dict[str, Any]) -> mlboard.core.models.maintenance_log.MaintenanceLog: ...
    def to_models(self, rows: Sequence[Dict[str, Any]]) -> Sequence[mlboard.core.models.maintenance_log.IMaintenanceLog]: ...
    def update(self, **kwargs) -> Coroutine[Any, Any, None]: ...
    def upsert(self, obj) -> Coroutine[Any, Any, uuid.UUID]: ...
